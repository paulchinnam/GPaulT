# -*- coding: utf-8 -*-
"""GPaulT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1naGUp3869nXQHXt6AJfuh97bLfGpFiwk
"""

import torch
import torch.nn as nn
from torch.nn import functional as F

# Hyperparameters
batch_size = 32
block_size = 8
max_iters = 3000
eval_interval = 300
learning_rate = 1e-2
device = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters = 200

torch.manual_seed(1337)

# Avengers Infinity War Script for training
# Read script in
# !wget https://raw.githubusercontent.com/paulchinnam/GPaulT/main/TrainingData/MovieScripts/input.txt
with open('../trainingData/MovieScripts/input.txt', 'r', encoding='utf-8') as f:
  text = f.read()

# Get all unique characters in dataset
chars = sorted(list(set(text)))
vocab_size = len(chars)

# Mapping from chars to integers
stoi = {ch:i for i,ch in enumerate(chars)}
itos = {i:ch for i,ch in enumerate(chars)}
encode = lambda s: [stoi[c] for c in s] # Encoder: take a string, output list of integers
decode = lambda l: ''.join([itos[i] for i in l]) # Decoder: take a list of integers, output a string

# Train and test splits
data = torch.tensor(encode(text), dtype=torch.long)
n = int(0.9*len(data)) # Calculate 90% of the length of the data
train_data = data[:n]
val_data = data[n:]

# Data loading
def get_batch(split):
  # Generate a small batch of data of inputs x and targets y
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size, (batch_size,))
  x = torch.stack([data[i:i + block_size] for i in ix])
  y = torch.stack([data[i + 1: i + block_size + 1] for i in ix])
  x, y = x.to(device), y.to(device)

  return x, y

@torch.no_grad()
def estimate_loss():
  out = {}
  model.eval()
  
  for split in ['train', 'val']:
    losses = torch.zeros(eval_iters)
    
    for k in range(eval_iters):
      X, Y = get_batch(split)
      logits, loss = model(X, Y)
      losses[k] = loss.item()
    
    out[split] = losses.mean()
  
  model.train()

  return out

# Create the model
class BigramLanguageModel(nn.Module):

  def __init__(self, vocab_size):

    super().__init__()

    # Each token directly reads off the logits for the next token from a lookup table
    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)

  def forward(self, idx, targets=None):

    # idx and target are both (B, T) tensor of integers
    logits = self.token_embedding_table(idx) # (B (batch), T (time), C (channel (vocab size)))

    if targets is None:
      loss = None

    else:
      B, T, C = logits.shape
      logits = logits.view(B*T, C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits, targets)

    return logits, loss

  def generate(self, idx, max_new_tokens):
    # idx is array of (B, T) indices in current context

    for _ in range(max_new_tokens):

      # Get the predictions
      logits, loss = self(idx)

      # Focus on last time step
      logits = logits[:, -1, :] # Becomes (B, C)

      # Apply softmax to get probabilities
      probs = F.softmax(logits, dim=-1) # (B, C)

      # Sample from distribution
      idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)

      # Append sampled index to the running sequence
      idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)

    return idx

model = BigramLanguageModel(vocab_size)
m = model.to(device)

# Create pytorch optimizer
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)

for iter in range(max_iters):

  # Evaluate the loss on the train and eval sets every once in a while
  if iter % eval_interval == 0:
    losses = estimate_loss()
    print(f"Step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

  # Get sample batch of data
  xb, yb = get_batch('train')

  # Evaluate loss
  logits, loss = m(xb, yb)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()

# Generate from the model
context = torch.zeros((1, 1), dtype=torch.long, device=device)
print(decode(m.generate(context, max_new_tokens=500)[0].tolist()))